# voice_notes.py ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï‡πÑ‡∏î‡πâ + ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
# Python 3.10

import os, re, sys
from datetime import datetime, timedelta
import speech_recognition as sr

# ============ Config ============
USE_DAILY_FILE = False          # True = notes-YYYYMMDD.txt, False = notes.txt
LOG_DIR = "logs"                # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏ô‡πâ‡∏ï
AUTO_NOTE_MODE = False          # ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ: ‡∏à‡∏î‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
USE_BUDDHIST_YEAR = False       # True = ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏µ ‡∏û.‡∏®., False = ‡∏Ñ.‡∏®.
SHOW_TIME_ON_HEARD = True       # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô

# ---- Wake-word / Lock ----
REQUIRE_WAKE_WORD = True
WAKE_WORDS = ("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello")      # ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å"
LOCK_WORDS = ("‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á", "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô", "‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô", "goodbye")  # ‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö
WAKE_TIMEOUT_SEC = 180                 # ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (None/0 = ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)

# ---- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ ----
CONTROL_START_WORDS = ("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï", "note mode on", "start note")
CONTROL_STOP_WORDS  = ("‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï", "‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï", "note mode off", "stop note")

# ---- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°) ----
EXIT_WORDS = (
    "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
    "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "exit", "quit", "shutdown", "terminate"
)

# ---- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï‡πÅ‡∏ö‡∏ö‡∏ä‡∏µ‡πâ‡∏ä‡∏±‡∏î (TH/EN) ----
TH_NOTE = re.compile(r"^\s*(?:‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô\s*)?‡πÇ‡∏ô‡πâ‡∏ï\s*[:\-]?\s*(.+)$")
EN_NOTE = re.compile(r"^\s*note\s*[:\-]?\s*(.+)$", re.IGNORECASE)

# ============ Utils ============
TH_DAY = ("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","‡∏®‡∏∏‡∏Å‡∏£‡πå","‡πÄ‡∏™‡∏≤‡∏£‡πå","‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå")
def format_datetime_th(dt: datetime, use_be: bool = False) -> str:
    day_name = TH_DAY[dt.weekday()]
    year = dt.year + 543 if use_be else dt.year
    return f"{day_name} {dt:%d/%m}/{year} {dt:%H:%M:%S}"

def _notes_path() -> str:
    fname = f"notes-{datetime.now():%Y%m%d}.txt" if USE_DAILY_FILE else "notes.txt"
    if LOG_DIR:
        os.makedirs(LOG_DIR, exist_ok=True)
        return os.path.join(LOG_DIR, fname)
    return fname

def extract_note_payload(text: str) -> str | None:
    m = TH_NOTE.match(text) or EN_NOTE.match(text)
    return m.group(1).strip() if m else None

def append_note_line(message: str) -> None:
    ts = format_datetime_th(datetime.now(), USE_BUDDHIST_YEAR)
    path = _notes_path()
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{ts}] {message}\n")
    print(f"üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ({ts}) ‚Üí {path}", flush=True)

def handle_note_command(text: str) -> bool:
    payload = extract_note_payload(text)
    if payload:
        append_note_line(payload)
        return True
    return False

def maybe_auto_note(text: str) -> bool:
    """
    1) ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ
    2) ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '‡πÇ‡∏ô‡πâ‡∏ï ‚Ä¶/Note ‚Ä¶'
    3) ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà -> ‡∏à‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
    ‡∏Ñ‡∏∑‡∏ô True ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    """
    global AUTO_NOTE_MODE
    norm = text.strip().lower()

    # 1) Toggle auto-note mode
    if any(norm.startswith(cmd.lower()) for cmd in CONTROL_START_WORDS):
        AUTO_NOTE_MODE = True
        print("üü¢ Auto-note: ON ‚Äî ‡∏à‡∏∞‡∏à‡∏î‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î (‡∏Ç‡∏ì‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å)", flush=True)
        return True
    if any(norm.startswith(cmd.lower()) for cmd in CONTROL_STOP_WORDS):
        AUTO_NOTE_MODE = False
        print("üî¥ Auto-note: OFF ‚Äî ‡∏à‡∏∞‡∏à‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á '‡πÇ‡∏ô‡πâ‡∏ï'", flush=True)
        return True

    # 2) Explicit note command
    if handle_note_command(text):
        print("‚úÖ ‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï (‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô)", flush=True)
        return True

    # 3) Auto-note all utterances
    if AUTO_NOTE_MODE and norm:
        append_note_line(text.strip())
        print("‚úÖ ‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï (‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏´‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î)", flush=True)
        return True

    return False

# ======== Exit helpers (‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°) ========
def is_exit_command(text: str) -> bool:
    norm = text.strip().lower()
    return any(norm.startswith(cmd.lower()) for cmd in EXIT_WORDS)

def graceful_exit():
    # ‡∏à‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏ô‡πâ‡∏ï ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û
    try:
        append_note_line("‚Äî ‡∏à‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô ‚Äî")
    except Exception:
        pass
    print("üëã ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢", flush=True)

# ============ Wake state ============
_wake_until: datetime | None = None

def _is_awake() -> bool:
    if not REQUIRE_WAKE_WORD:
        return True
    if _wake_until is None:
        return False
    return datetime.now() < _wake_until

def _extend_wake():
    global _wake_until
    if not REQUIRE_WAKE_WORD:
        return
    if WAKE_TIMEOUT_SEC and WAKE_TIMEOUT_SEC > 0:
        _wake_until = datetime.now() + timedelta(seconds=WAKE_TIMEOUT_SEC)
    else:
        _wake_until = datetime.max

def _wake():
    _extend_wake()
    left = "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤" if _wake_until == datetime.max else f"{WAKE_TIMEOUT_SEC}s"
    print(f"üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï) ‚Äî ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô {left}", flush=True)

def _sleep():
    global _wake_until
    _wake_until = None
    print("üîí ‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", flush=True)

def _strip_prefix(text: str, prefix: str) -> str:
    if text.lower().startswith(prefix.lower()):
        return text[len(prefix):].lstrip(" ,:;-‚Äî")
    return text

def handle_with_wake(text: str) -> bool:
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ wake/lock + ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á maybe_auto_note ‡∏ñ‡πâ‡∏≤ '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å' ‡πÅ‡∏•‡πâ‡∏ß
    ‡∏Ñ‡∏∑‡∏ô True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å/‡∏•‡πá‡∏≠‡∏Å/‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï) ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    ‡∏Ñ‡∏∑‡∏ô False ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏ô‡πâ‡∏ï -> ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    """
    norm = text.strip().lower()

    # 0) ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏•‡∏±‡∏ö
    if any(norm.startswith(cmd.lower()) for cmd in LOCK_WORDS):
        _sleep()
        return True

    # 1) ‡∏ï‡∏£‡∏ß‡∏à wake word
    for w in WAKE_WORDS:
        if norm.startswith(w.lower()):
            _wake()
            # ‡∏ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡πÇ‡∏ô‡πâ‡∏ï ‚Ä¶" ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠
            remainder = _strip_prefix(text, w)
            if remainder:
                _extend_wake()
                return maybe_auto_note(remainder)
            return True  # ‡πÅ‡∏Ñ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏â‡∏¢‡πÜ

    # 2) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å ‚Üí ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏ô‡πâ‡∏ï (‡πÅ‡∏ï‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏õ‡∏ï‡πà‡∏≠)
    if not _is_awake():
        print("üîí ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ' ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï‡πÑ‡∏î‡πâ", flush=True)
        return False

    # 3) ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ handler ‡∏Ç‡∏≠‡∏á‡πÇ‡∏ô‡πâ‡∏ï
    _extend_wake()
    return maybe_auto_note(text)

# ============ Mic Loop ============
def mic_loop():
    r = sr.Recognizer()
    with sr.Microphone() as mic:
        r.adjust_for_ambient_noise(mic, duration=0.6)
        now_str = format_datetime_th(datetime.now(), USE_BUDDHIST_YEAR)
        print("üéôÔ∏è ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á ‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ' ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ '‡πÇ‡∏ô‡πâ‡∏ï ‚Ä¶' ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ", flush=True)
        print("   ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡πÇ‡∏ô‡πâ‡∏ï ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°'", flush=True)
        print("   ‡∏û‡∏π‡∏î '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", flush=True)
        print(f"‚åö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {now_str}", flush=True)

        while True:
            try:
                audio = r.listen(mic, timeout=6, phrase_time_limit=10)
                try:
                    text = r.recognize_google(audio, language="th-TH")
                except sr.UnknownValueError:
                    text = r.recognize_google(audio, language="en-US")

                ts = format_datetime_th(datetime.now(), USE_BUDDHIST_YEAR)
                if SHOW_TIME_ON_HEARD:
                    print(f"[{ts}] ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô: {text}", flush=True)
                else:
                    print("‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô:", text, flush=True)

                # ====== ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å) ======
                if is_exit_command(text):
                    graceful_exit()
                    break  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

                # ====== ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ wake word ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏î‡πÇ‡∏ô‡πâ‡∏ï ======
                if handle_with_wake(text):
                    continue

                # ====== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ======
                # if text.startswith("‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô"): ...

            except sr.WaitTimeoutError:
                print("‚Ä¶‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡∏Ñ‡πå", flush=True)
            except sr.UnknownValueError:
                print("‡∏¢‡∏±‡∏á‡∏ü‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î ‡∏•‡∏≠‡∏á‡∏û‡∏π‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", flush=True)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î (Ctrl+C) ‚Äî ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", flush=True)
                break
            except Exception as e:
                print("‚ùó Error:", e, flush=True)

# ============ Main ============
if __name__ == "__main__":
    # ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏à‡∏≤‡∏Å CLI
    #   python voice_notes.py --test "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡πÇ‡∏ô‡πâ‡∏ï ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°"
    #   python voice_notes.py --test "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    if len(sys.argv) > 1 and sys.argv[1] in ("--test", "-t"):
        payload = " ".join(sys.argv[2:])
        if payload:
            if is_exit_command(payload):
                graceful_exit()
            elif not handle_with_wake(payload):
                print("‚ÑπÔ∏è (TEST) ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏î ‚Äî ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ'", flush=True)
        sys.exit(0)

    print("üöÄ Booting voice notes‚Ä¶", flush=True)
    mic_loop()
